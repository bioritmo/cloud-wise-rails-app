name: "CI"

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "main"
      - "master"
  schedule:
    - cron: "30 12 * * *"

env:
  ACTIONS_STEP_DEBUG: true
  AWS_SDK_LOAD_CONFIG: "true"
  AWS_SDK_LOG_LEVEL: "debug"

permissions:
  id-token: write
  contents: write

jobs:
  test:
    runs-on: "ubuntu-22.04"

    steps:
      - uses: "actions/checkout@v2"

      - name: "Install CI dependencies"
        run: |
          ./run ci:install-deps

      - name: "Test"
        run: |
          # Remove volumes in CI to avoid permission errors due to UID / GID.
          sed -i "s|.:/app|/tmp:/tmp|g" .env*
          sed -i "s|.:/app|/tmp:/tmp|g" compose.yaml

          ./run ci:test

  terraform:
    runs-on: "ubuntu-22.04"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.8"

      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: go to terraform folder
        run: |
          cd terraform
          ls -la

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Apply Terraform
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd terraform
          terraform apply -auto-approve

  build:
    name: Build Image
    runs-on: "ubuntu-22.04"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Tag
        run: |
          echo "IMAGE_TAG=${GITHUB_SHA::6}" >> $GITHUB_ENV

      - name: Check if Dockerfile exists
        run: ls -la

      - name: Build docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_APP }}:$IMAGE_TAG .

      - name: Push docker image
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_APP }}:$IMAGE_TAG
